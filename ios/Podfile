platform :ios, '13.0'

source 'https://github.com/CocoaPods/Specs.git'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup


def base_pods

pod 'IQKeyboardManagerSwift'
pod 'SmartCodable'
pod 'SnapKit'

pod 'ReachabilitySwift', '~> 5.2.4'

pod 'ProgressHUD'

# 数据库
pod 'RealmSwift'
pod 'HXPhotoPicker'

end

target 'Runner' do
  use_frameworks!
  use_modular_headers!
  base_pods
#  pod 'LooseCore',    :path => 'LocalPods/LooseCore'  # YYKit

  
  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
      config.build_settings["EXCLUDED_ARCHS[sdk=iphonesimulator*]"] = "arm64"
      config.build_settings['SWIFT_VERSION'] = '5.0'
      config.build_settings['SWIFT_OPTIMIZATION_LEVEL'] = '-Onone'

    end
    flutter_additional_ios_build_settings(target)
  end
#  bitcode_strip_path = `xcrun --find bitcode_strip`.chop!
#  def strip_bitcode_from_framework(bitcode_strip_path, framework_relative_path)
#    framework_path = File.join(Dir.pwd, framework_relative_path)
#    command = "#{bitcode_strip_path} #{framework_path} -r -o #{framework_path}"
#    puts "Stripping bitcode: #{command}"
#    system(command)
#  end
#  framework_paths = [
#    "/Pods/TXIMSDK_Plus_iOS_Bitcode/ImSDK_Plus.framework/ImSDK_Plus",
#  ]
#  framework_paths.each do |framework_relative_path|
#    strip_bitcode_from_framework(bitcode_strip_path, framework_relative_path)
#  end

end
